scm> (define a (+ 1 2))
a

scm> a
3

scm> (define b (- (+ (* 3 3) 2) 1))
b

scm> (= (modulo b a) (quotient 5 3))
#t

scm> (if (or #t (/ 1 0)) 1 (/ 1 0))
1

scm> ((if (< 4 3) + -) 4 100)
-96

(define (factorial x)
  (if (= x 0)
	  1
	  (* x (factorial (- x 1)))))

(define (fib n)
    (if (< n 2)
        n
        (+ (fib (- n 1)) (fib (- n 2))))
)

(define (my-append a b)
    (if (null? a) 
        b
        (cons (car a) (my-append (cdr a) b))
    )
)

(define x (+ 1 2 3))
x -> 6

(define (x) (+ 1 2 3))
(x) -> 6

(define s '(5 4 (1 2) 3 7))

(car (cdr (cdr (cdr s))))

(define (duplicate lst)
    (if (null? lst)
        nil
        (cons (car lst) (cons (car lst) (duplicate (cdr lst))) )
    )
)

(define (insert element lst index)
    (if (< index 1) 
        (cons element lst)
        (cons (car lst) (insert element (cdr lst) (- index 1)))
    )
)